name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip build twine
      
      - name: Build artifacts
        run: bash scripts/build_artifacts.sh
      
      - name: Check artifacts
        run: bash scripts/check_artifacts.sh
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
      
      - name: Publish to PyPI
        if: ${{ secrets.PYPI_API_TOKEN != '' }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload dist/* --skip-existing

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      - name: Extract tag name
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: "Regen88 Codex ${{ env.TAG_NAME }}"
          body: |
            ## Regen88 Codex ${{ env.TAG_NAME }}
            
            ### Installation
            ```bash
            pip install regen88-codex==${{ env.TAG_NAME }}
            ```
            
            ### Verify Installation
            ```bash
            rfm --help
            python -c "import recursive_field_math; print('âœ“ Installation successful')"
            ```
            
            ### Features
            - Complete cross-platform build, test, and release setup
            - CI: lint/type/test across multiple Python versions
            - Release-on-tag workflow with artifact uploads
            - PyPI publishing with PYPI_API_TOKEN (when configured)
            - Pre-commit hooks and development scripts
            - Enhanced packaging metadata and documentation
            
            For more details, see [CHANGELOG.md](CHANGELOG.md).
          files: |
            dist/*
          draft: false
          prerelease: ${{ contains(env.TAG_NAME, 'rc') || contains(env.TAG_NAME, 'alpha') || contains(env.TAG_NAME, 'beta') }}