name: Publish to TestPyPI (Trusted Publishing)

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Build only (skip publish)"
        type: boolean
        default: false

permissions:
  contents: read
  id-token: write
  attestations: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (release tag)
        if: ${{ github.event_name == 'release' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name }}

      - name: Checkout (default branch)
        if: ${{ github.event_name != 'release' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build sdist and wheel
        run: |
          python -m build --sdist --wheel --outdir dist
          ls -l dist

      - name: Twine metadata check
        run: twine check dist/*

      - name: SDist/Wheel sanity check (size & banned globs)
        env:
          SDIST_MAX_BYTES: "2000000"
        run: |
          python - <<'PY'
import os, sys, tarfile, zipfile
from fnmatch import fnmatch
from pathlib import Path

MAX_BYTES = int(os.environ.get("SDIST_MAX_BYTES", "2000000"))
BANNED = [
    "artifacts/", "site/", ".github/", ".git/",
    "*.zip", "*.7z", "**/*.mp4", "**/*.mov",
    "*.pdf", "*.psd"
]

def flagged(name: str, size: int):
    reasons = []
    if any(fnmatch(name, pat) for pat in BANNED):
        reasons.append("banned")
    if size > MAX_BYTES:
        reasons.append(f"too-large:{size}")
    return reasons

def scan_sdist(p: Path):
    issues = []
    with tarfile.open(p, "r:gz") as tf:
        for m in tf.getmembers():
            for r in flagged(m.name, m.size):
                issues.append((p.name, m.name, r))
    return issues

def scan_wheel(p: Path):
    issues = []
    with zipfile.ZipFile(p) as z:
        for info in z.infolist():
            for r in flagged(info.filename, info.file_size):
                issues.append((p.name, info.filename, r))
    return issues

dist = Path("dist")
problems = []
for s in dist.glob("*.tar.gz"):
    problems += scan_sdist(s)
for w in dist.glob("*.whl"):
    problems += scan_wheel(w)

if problems:
    print("Found problematic files in built distributions:")
    for pkg, name, why in problems:
        print(f" - {pkg}: {name} [{why}]")
    sys.exit(1)

print("Distribution contents look sane.")
PY

      - name: Verify tag matches project version
        if: ${{ github.event_name == 'release' }}
        run: |
          set -euo pipefail
          TAG="${{ github.event.release.tag_name }}"
          CLEAN_TAG="${TAG#v}"
          PKG_VER=$(python - <<'PY'
import sys, tomllib
with open("pyproject.toml","rb") as f:
    data = tomllib.load(f)
ver = data.get("project", {}).get("version")
if not ver:
    sys.exit("No [project].version found in pyproject.toml")
print(ver)
PY
)
          echo "pyproject version: $PKG_VER"
          if [ "$CLEAN_TAG" != "$PKG_VER" ]; then
            echo "ERROR: Tag $TAG does not match project version $PKG_VER" >&2
            exit 1
          fi
          echo "Tag/version match OK: $TAG == $PKG_VER"

      - name: Generate SLSA provenance (dist/*)
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: "dist/*"

      - name: Publish to TestPyPI (OIDC, no secrets)
        if: ${{ !(github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'true') }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true

      - name: Post-publish smoke install (TestPyPI)
        if: ${{ github.event_name == 'release' && !(github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run == 'true') }}
        run: |
          python -m venv /tmp/pkgtest
          . /tmp/pkgtest/bin/activate
          python -m pip install --upgrade pip
          pip install --no-deps --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple recursive-field-math
          python - <<'PY'
import recursive_field_math
print("Imported recursive_field_math ok (TestPyPI) â€” version:", getattr(recursive_field_math, "__version__", "<?>"))
PY
          rfm --help || true

      - name: Upload dist artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: testpypi-dist-${{ github.run_id }}
          path: dist/*